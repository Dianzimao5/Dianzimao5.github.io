// Ê®°ÊãüÊàêÂ∞±Êï∞ÊçÆ
const achievementsData = [
    {
        id: 1,
        title: "‰∏çÁú†‰∏ç‰ºë",
        game: "ËµõÂçöÊúãÂÖã2077",
        description: "ËøûÁª≠Ê∏∏Êàè12Â∞èÊó∂",
        icon: "üèÜ",
        rarity: 5,
        unlocks: 1234,
        type: "rare",
        recentUnlocks: [
            {
                playerId: 1,
                playerName: "Áé©ÂÆ∂Â∞èÊòé",
                avatar: "/api/placeholder/32/32",
                unlockTime: "10ÂàÜÈíüÂâç"
            },
            {
                playerId: 2,
                playerName: "Ê∏∏ÊàèËææ‰∫∫",
                avatar: "/api/placeholder/32/32",
                unlockTime: "1Â∞èÊó∂Ââç"
            }
        ]
    },
    {
        id: 2,
        title: "Êî∂ËóèÂÆ∂",
        game: "ËâæÂ∞îÁôªÊ≥ïÁéØ",
        description: "Êî∂ÈõÜ1000‰ª∂Áâ©ÂìÅ",
        icon: "üåü",
        rarity: 3,
        unlocks: 567,
        type: "legendary",
        recentUnlocks: [
            {
                playerId: 3,
                playerName: "Êé¢Á¥¢ËÄÖ",
                avatar: "/api/placeholder/32/32",
                unlockTime: "2Â∞èÊó∂Ââç"
            }
        ]
    },
    {
        id: 3,
        title: "ÂàùÁ∫ßÁé©ÂÆ∂",
        game: "Á©∫Ê¥ûÈ™ëÂ£´",
        description: "ÂÆåÊàêÁ¨¨‰∏Ä‰∏™Âå∫Âüü",
        icon: "‚≠ê",
        rarity: 45,
        unlocks: 8901,
        type: "common",
        recentUnlocks: [
            {
                playerId: 4,
                playerName: "Êñ∞ÊâãÁé©ÂÆ∂",
                avatar: "/api/placeholder/32/32",
                unlockTime: "30ÂàÜÈíüÂâç"
            }
        ]
    }
];

// ÂΩìÂâçÈ°µÈù¢Áä∂ÊÄÅ
let currentPage = 1;
let itemsPerPage = 12;
let currentSort = 'latest';
let currentGame = '';
let currentRarity = '';

// È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÊâßË°å
document.addEventListener('DOMContentLoaded', function() {
    initializeAchievements();
});

// ÂàùÂßãÂåñÊàêÂ∞±È°µÈù¢
function initializeAchievements() {
    displayAchievements();
    initializeFilters();
    updateStats();
    initializeEventListeners();
}

// ÊòæÁ§∫ÊàêÂ∞±ÂàóË°®
function displayAchievements(filteredAchievements = achievementsData) {
    const container = document.getElementById('achievementsList');
    if (!container) return;

    const start = (currentPage - 1) * itemsPerPage;
    const end = start + itemsPerPage;
    const achievementsToShow = filteredAchievements.slice(start, end);

    container.innerHTML = achievementsToShow.map(achievement => `
        <div class="achievement-card" data-id="${achievement.id}" onclick="showAchievementDetails(${achievement.id})">
            <div class="achievement-icon">${achievement.icon}</div>
            <div class="achievement-info">
                <div class="achievement-title">${achievement.title}</div>
                <div class="achievement-game">${achievement.game}</div>
                <div class="achievement-meta">
                    <span>${achievement.unlocks}‰∫∫Ëß£ÈîÅ</span>
                    <span class="rarity-badge rarity-${achievement.type}">
                        Á®ÄÊúâÂ∫¶: ${achievement.rarity}%
                    </span>
                </div>
            </div>
        </div>
    `).join('');

    updatePagination(filteredAchievements.length);
}

// Êõ¥Êñ∞ÁªüËÆ°‰ø°ÊÅØ
function updateStats() {
    const totalUnlocks = achievementsData.reduce((sum, achievement) => sum + achievement.unlocks, 0);
    const averageRarity = (achievementsData.reduce((sum, achievement) => sum + achievement.rarity, 0) / achievementsData.length).toFixed(1);

    // Êõ¥Êñ∞ÁªüËÆ°Âç°Áâá
    document.querySelectorAll('.stat-card').forEach(card => {
        const label = card.querySelector('.stat-label').textContent;
        const value = card.querySelector('.stat-value');
        
        switch(label) {
            case 'ÊÄªÊàêÂ∞±Êï∞':
                value.textContent = achievementsData.length;
                break;
            case '‰ªäÊó•Ëß£ÈîÅ':
                value.textContent = calculateTodayUnlocks();
                break;
            case 'Âπ≥ÂùáÁ®ÄÊúâÂ∫¶':
                value.textContent = `${averageRarity}%`;
                break;
        }
    });
}

// ÂàùÂßãÂåñÁ≠õÈÄâÂô®
function initializeFilters() {
    // Ê∏∏ÊàèÁ≠õÈÄâÂô®
    const gameSelect = document.getElementById('gameSelect');
    if (gameSelect) {
        gameSelect.addEventListener('change', handleFilters);
    }

    // Á®ÄÊúâÂ∫¶Á≠õÈÄâÂô®
    const raritySelect = document.getElementById('raritySelect');
    if (raritySelect) {
        raritySelect.addEventListener('change', handleFilters);
    }

    // ÊéíÂ∫èÈÄâÊã©Âô®
    const sortSelect = document.getElementById('sortSelect');
    if (sortSelect) {
        sortSelect.addEventListener('change', handleSort);
    }
}

// Â§ÑÁêÜÁ≠õÈÄâ
function handleFilters() {
    const game = document.getElementById('gameSelect').value;
    const rarity = document.getElementById('raritySelect').value;
    
    let filteredAchievements = [...achievementsData];

    // ÊåâÊ∏∏ÊàèÁ≠õÈÄâ
    if (game) {
        filteredAchievements = filteredAchievements.filter(achievement => 
            achievement.game.toLowerCase().includes(game.toLowerCase())
        );
    }

    // ÊåâÁ®ÄÊúâÂ∫¶Á≠õÈÄâ
    if (rarity) {
        filteredAchievements = filteredAchievements.filter(achievement => {
            switch(rarity) {
                case 'common':
                    return achievement.rarity > 20;
                case 'rare':
                    return achievement.rarity <= 20 && achievement.rarity > 5;
                case 'legendary':
                    return achievement.rarity <= 5;
                default:
                    return true;
            }
        });
    }

    displayAchievements(filteredAchievements);
}

// Â§ÑÁêÜÊéíÂ∫è
function handleSort(e) {
    const sortType = e.target.value;
    const sortedAchievements = [...achievementsData];

    switch (sortType) {
        case 'latest':
            // ËøôÈáåÂ∫îËØ•Ê†πÊçÆÂÆûÈôÖÁöÑÊó∂Èó¥Êà≥ÊéíÂ∫è
            break;
        case 'rarity':
            sortedAchievements.sort((a, b) => a.rarity - b.rarity);
            break;
        case 'popular':
            sortedAchievements.sort((a, b) => b.unlocks - a.unlocks);
            break;
    }

    displayAchievements(sortedAchievements);
}

// ÊòæÁ§∫ÊàêÂ∞±ËØ¶ÊÉÖ
function showAchievementDetails(achievementId) {
    const achievement = achievementsData.find(a => a.id === achievementId);
    if (!achievement) return;

    document.getElementById('achievementTitle').textContent = achievement.title;
    document.getElementById('achievementIcon').textContent = achievement.icon;
    document.getElementById('achievementGame').textContent = achievement.game;
    document.getElementById('achievementDesc').textContent = achievement.description;
    document.getElementById('achievementUnlocks').textContent = `${achievement.unlocks}‰∫∫`;
    document.getElementById('achievementRarity').textContent = `${achievement.rarity}%`;

    // ÊòæÁ§∫ÊúÄËøëËß£ÈîÅÂàóË°®
    const unlocksList = document.getElementById('recentUnlocksList');
    unlocksList.innerHTML = achievement.recentUnlocks.map(unlock => `
        <div class="unlock-item">
            <div class="unlock-player">
                <div class="player-avatar" style="background-image: url('${unlock.avatar}')"></div>
                <span>${unlock.playerName}</span>
            </div>
            <span class="unlock-time">${unlock.unlockTime}</span>
        </div>
    `).join('');

    openModal('achievementModal');
}

// Êõ¥Êñ∞ÂàÜÈ°µ
function updatePagination(totalItems) {
    const totalPages = Math.ceil(totalItems / itemsPerPage);
    const pagination = document.querySelector('.pagination');
    const prevBtn = pagination.querySelector('.page-btn:first-child');
    const nextBtn = pagination.querySelector('.page-btn:last-child');
    const pageNumber = pagination.querySelector('.page-number');

    prevBtn.disabled = currentPage === 1;
    nextBtn.disabled = currentPage === totalPages;
    pageNumber.textContent = currentPage;
}

// ËÆ°ÁÆó‰ªäÊó•Ëß£ÈîÅÊï∞ÈáèÔºàÊ®°ÊãüÊï∞ÊçÆÔºâ
function calculateTodayUnlocks() {
    return Math.floor(Math.random() * 1000);
}

// ÂàùÂßãÂåñ‰∫ã‰ª∂ÁõëÂê¨Âô®
function initializeEventListeners() {
    // ÊêúÁ¥¢ÂäüËÉΩ
    const searchInput = document.querySelector('.search-container input');
    if (searchInput) {
        searchInput.addEventListener('input', handleSearch);
    }


    // ÂàÜÈ°µÊåâÈíÆ
    const prevBtn = document.querySelector('.page-btn:first-child');
    const nextBtn = document.querySelector('.page-btn:last-child');

    if (prevBtn) {
        prevBtn.addEventListener('click', () => {
            if (currentPage > 1) {
                currentPage--;
                displayAchievements();
            }
        });
    }

    if (nextBtn) {
        nextBtn.addEventListener('click', () => {
            const totalPages = Math.ceil(achievementsData.length / itemsPerPage);
            if (currentPage < totalPages) {
                currentPage++;
                displayAchievements();
            }
        });
    }
}

// Â§ÑÁêÜÊêúÁ¥¢
function handleSearch(e) {
    const searchTerm = e.target.value.toLowerCase();
    const filteredAchievements = achievementsData.filter(achievement => 
        achievement.title.toLowerCase().includes(searchTerm) ||
        achievement.game.toLowerCase().includes(searchTerm) ||
        achievement.description.toLowerCase().includes(searchTerm)
    );
    displayAchievements(filteredAchievements);
}

// Ê®°ÊÄÅÊ°ÜÊéßÂà∂
function openModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.classList.add('active');
    }
}

function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.classList.remove('active');
    }
}// JavaScript Document